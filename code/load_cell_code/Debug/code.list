
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c48  08002c48  00003c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c74  08002c74  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c74  08002c74  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c74  08002c74  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c74  08002c74  00003c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c78  08002c78  00003c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c7c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08002c88  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002c88  00004124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ae0  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001770  00000000  00000000  0000cb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0000e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d9  00000000  00000000  0000eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f32  00000000  00000000  0000f481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1cc  00000000  00000000  000263b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f04  00000000  00000000  0003257f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a0c  00000000  00000000  000b74c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000b9ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c30 	.word	0x08002c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c30 	.word	0x08002c30

0800014c <ADS1219_dataReady>:
    if (u & 0x00800000) u |= 0xFF000000;  // sign-extend
    return (int32_t)u;
}
// Returns true once the ADS1219’s DRDY bit (bit7 of status reg) is set
static bool ADS1219_dataReady(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
    uint8_t cmd = ADS1219_CMD_STATUS_READ;
 8000152:	2320      	movs	r3, #32
 8000154:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	71bb      	strb	r3, [r7, #6]

    if (HAL_I2C_Master_Transmit(&hi2c1, ADS1219_I2C_ADDR, &cmd, 1, 100) != HAL_OK)
 800015a:	1dfa      	adds	r2, r7, #7
 800015c:	2364      	movs	r3, #100	@ 0x64
 800015e:	9300      	str	r3, [sp, #0]
 8000160:	2301      	movs	r3, #1
 8000162:	2180      	movs	r1, #128	@ 0x80
 8000164:	480e      	ldr	r0, [pc, #56]	@ (80001a0 <ADS1219_dataReady+0x54>)
 8000166:	f000 ff91 	bl	800108c <HAL_I2C_Master_Transmit>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d001      	beq.n	8000174 <ADS1219_dataReady+0x28>
        return false;
 8000170:	2300      	movs	r3, #0
 8000172:	e011      	b.n	8000198 <ADS1219_dataReady+0x4c>
    if (HAL_I2C_Master_Receive(&hi2c1, ADS1219_I2C_ADDR, &status, 1, 100) != HAL_OK)
 8000174:	1dba      	adds	r2, r7, #6
 8000176:	2364      	movs	r3, #100	@ 0x64
 8000178:	9300      	str	r3, [sp, #0]
 800017a:	2301      	movs	r3, #1
 800017c:	2180      	movs	r1, #128	@ 0x80
 800017e:	4808      	ldr	r0, [pc, #32]	@ (80001a0 <ADS1219_dataReady+0x54>)
 8000180:	f001 f882 	bl	8001288 <HAL_I2C_Master_Receive>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d001      	beq.n	800018e <ADS1219_dataReady+0x42>
        return false;
 800018a:	2300      	movs	r3, #0
 800018c:	e004      	b.n	8000198 <ADS1219_dataReady+0x4c>

    return (status & 0x80) != 0;
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	b25b      	sxtb	r3, r3
 8000192:	b2db      	uxtb	r3, r3
 8000194:	09db      	lsrs	r3, r3, #7
 8000196:	b2db      	uxtb	r3, r3
}
 8000198:	4618      	mov	r0, r3
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	20000028 	.word	0x20000028

080001a4 <ADS1219_readConversion>:

// Reads 3 bytes via the “read data” command, sign-extends to 32 bits
static int32_t ADS1219_readConversion(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af02      	add	r7, sp, #8
    uint8_t cmd = ADS1219_CMD_READ_DATA;
 80001aa:	2310      	movs	r3, #16
 80001ac:	70fb      	strb	r3, [r7, #3]
    uint8_t raw[3];
    uint32_t u = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	607b      	str	r3, [r7, #4]

    HAL_I2C_Master_Transmit(&hi2c1, ADS1219_I2C_ADDR, &cmd, 1, 100);
 80001b2:	1cfa      	adds	r2, r7, #3
 80001b4:	2364      	movs	r3, #100	@ 0x64
 80001b6:	9300      	str	r3, [sp, #0]
 80001b8:	2301      	movs	r3, #1
 80001ba:	2180      	movs	r1, #128	@ 0x80
 80001bc:	4810      	ldr	r0, [pc, #64]	@ (8000200 <ADS1219_readConversion+0x5c>)
 80001be:	f000 ff65 	bl	800108c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive (&hi2c1, ADS1219_I2C_ADDR, raw, 3, 100);
 80001c2:	463a      	mov	r2, r7
 80001c4:	2364      	movs	r3, #100	@ 0x64
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2303      	movs	r3, #3
 80001ca:	2180      	movs	r1, #128	@ 0x80
 80001cc:	480c      	ldr	r0, [pc, #48]	@ (8000200 <ADS1219_readConversion+0x5c>)
 80001ce:	f001 f85b 	bl	8001288 <HAL_I2C_Master_Receive>

    u = ((uint32_t)raw[0] << 16) |
 80001d2:	783b      	ldrb	r3, [r7, #0]
 80001d4:	041a      	lsls	r2, r3, #16
        ((uint32_t)raw[1] <<  8) |
 80001d6:	787b      	ldrb	r3, [r7, #1]
 80001d8:	021b      	lsls	r3, r3, #8
    u = ((uint32_t)raw[0] << 16) |
 80001da:	4313      	orrs	r3, r2
         (uint32_t)raw[2];
 80001dc:	78ba      	ldrb	r2, [r7, #2]
    u = ((uint32_t)raw[0] << 16) |
 80001de:	4313      	orrs	r3, r2
 80001e0:	607b      	str	r3, [r7, #4]

    // sign-extend 24→32 bits
    if (u & 0x00800000)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d003      	beq.n	80001f4 <ADS1219_readConversion+0x50>
        u |= 0xFF000000;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80001f2:	607b      	str	r3, [r7, #4]

    return (int32_t)u;
 80001f4:	687b      	ldr	r3, [r7, #4]
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000028 	.word	0x20000028

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 faf5 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f85d 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f92d 	bl	8000470 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f89b 	bl	8000350 <MX_I2C1_Init>
  MX_SPI1_Init();
 800021a:	f000 f8c7 	bl	80003ac <MX_SPI1_Init>
  MX_USART1_Init();
 800021e:	f000 f8fb 	bl	8000418 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  // reset ads1219 following arduino library

  {
    uint8_t cmd = ADS1219_CMD_RESET;
 8000222:	2306      	movs	r3, #6
 8000224:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Master_Transmit(&hi2c1, ADS1219_I2C_ADDR, &cmd, 1, 100);
 8000226:	1cfa      	adds	r2, r7, #3
 8000228:	2364      	movs	r3, #100	@ 0x64
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2301      	movs	r3, #1
 800022e:	2180      	movs	r1, #128	@ 0x80
 8000230:	4822      	ldr	r0, [pc, #136]	@ (80002bc <main+0xb8>)
 8000232:	f000 ff2b 	bl	800108c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);  // tRSSTA ≥100 µs
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fb40 	bl	80008bc <HAL_Delay>
  }


  // Reset the Lantronix XPort on PA11
  HAL_GPIO_WritePin(XPORT_RST_GPIO_Port, XPORT_RST_Pin, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000242:	481f      	ldr	r0, [pc, #124]	@ (80002c0 <main+0xbc>)
 8000244:	f000 fdc6 	bl	8000dd4 <HAL_GPIO_WritePin>
  HAL_Delay(10);   // hold reset low ≥10 ms
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fb37 	bl	80008bc <HAL_Delay>
  HAL_GPIO_WritePin(XPORT_RST_GPIO_Port, XPORT_RST_Pin, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000254:	481a      	ldr	r0, [pc, #104]	@ (80002c0 <main+0xbc>)
 8000256:	f000 fdbd 	bl	8000dd4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE BEGIN 3 */
	    // 1) timestamp
	    txPacket.timestamp = HAL_GetTick();
 800025a:	f000 fb25 	bl	80008a8 <HAL_GetTick>
 800025e:	4603      	mov	r3, r0
 8000260:	4a18      	ldr	r2, [pc, #96]	@ (80002c4 <main+0xc0>)
 8000262:	6013      	str	r3, [r2, #0]

	    // 2) trigger a conversion
	    {
	      uint8_t cmd = ADS1219_CMD_START_SYNC;
 8000264:	2308      	movs	r3, #8
 8000266:	70bb      	strb	r3, [r7, #2]
	      HAL_I2C_Master_Transmit(&hi2c1, ADS1219_I2C_ADDR, &cmd, 1, 100);
 8000268:	1cba      	adds	r2, r7, #2
 800026a:	2364      	movs	r3, #100	@ 0x64
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2301      	movs	r3, #1
 8000270:	2180      	movs	r1, #128	@ 0x80
 8000272:	4812      	ldr	r0, [pc, #72]	@ (80002bc <main+0xb8>)
 8000274:	f000 ff0a 	bl	800108c <HAL_I2C_Master_Transmit>
	    }

	    // 3) wait until the library‐style dataReady() returns true
	    while (!ADS1219_dataReady());
 8000278:	bf00      	nop
 800027a:	f7ff ff67 	bl	800014c <ADS1219_dataReady>
 800027e:	4603      	mov	r3, r0
 8000280:	f083 0301 	eor.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d1f7      	bne.n	800027a <main+0x76>

	    // 4) fetch & pack the signed 24-bit result
	    {
	      int32_t raw = ADS1219_readConversion();
 800028a:	f7ff ff8b 	bl	80001a4 <ADS1219_readConversion>
 800028e:	6078      	str	r0, [r7, #4]
	      txPacket.adc24[0] = (raw >> 16) & 0xFF;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	141b      	asrs	r3, r3, #16
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <main+0xc0>)
 8000298:	711a      	strb	r2, [r3, #4]
	      txPacket.adc24[1] = (raw >>  8) & 0xFF;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	121b      	asrs	r3, r3, #8
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <main+0xc0>)
 80002a2:	715a      	strb	r2, [r3, #5]
	      txPacket.adc24[2] = (raw      ) & 0xFF;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <main+0xc0>)
 80002aa:	719a      	strb	r2, [r3, #6]
	    }

	    // 5) send your 7-byte packet over UART1 → XPort
	    HAL_USART_Transmit(&husart1,
 80002ac:	2364      	movs	r3, #100	@ 0x64
 80002ae:	2207      	movs	r2, #7
 80002b0:	4904      	ldr	r1, [pc, #16]	@ (80002c4 <main+0xc0>)
 80002b2:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <main+0xc4>)
 80002b4:	f002 fab1 	bl	800281a <HAL_USART_Transmit>
	    txPacket.timestamp = HAL_GetTick();
 80002b8:	e7cf      	b.n	800025a <main+0x56>
 80002ba:	bf00      	nop
 80002bc:	20000028 	.word	0x20000028
 80002c0:	40010800 	.word	0x40010800
 80002c4:	20000118 	.word	0x20000118
 80002c8:	200000d4 	.word	0x200000d4

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	@ 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	@ 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fc7c 	bl	8002bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002fe:	2300      	movs	r3, #0
 8000300:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000302:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0318 	add.w	r3, r7, #24
 800030c:	4618      	mov	r0, r3
 800030e:	f001 fdad 	bl	8001e6c <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000318:	f000 f90a 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	2302      	movs	r3, #2
 8000322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2101      	movs	r1, #1
 8000336:	4618      	mov	r0, r3
 8000338:	f002 f81a 	bl	8002370 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000342:	f000 f8f5 	bl	8000530 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3740      	adds	r7, #64	@ 0x40
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000354:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <MX_I2C1_Init+0x50>)
 8000356:	4a13      	ldr	r2, [pc, #76]	@ (80003a4 <MX_I2C1_Init+0x54>)
 8000358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_I2C1_Init+0x50>)
 800035c:	4a12      	ldr	r2, [pc, #72]	@ (80003a8 <MX_I2C1_Init+0x58>)
 800035e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_I2C1_Init+0x50>)
 800036e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <MX_I2C1_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800037a:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_I2C1_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000380:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <MX_I2C1_Init+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000386:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <MX_I2C1_Init+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800038c:	4804      	ldr	r0, [pc, #16]	@ (80003a0 <MX_I2C1_Init+0x50>)
 800038e:	f000 fd39 	bl	8000e04 <HAL_I2C_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000398:	f000 f8ca 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000028 	.word	0x20000028
 80003a4:	40005400 	.word	0x40005400
 80003a8:	000186a0 	.word	0x000186a0

080003ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003b2:	4a18      	ldr	r2, [pc, #96]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003be:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003e0:	2208      	movs	r2, #8
 80003e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ea:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f0:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003f8:	220a      	movs	r2, #10
 80003fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	@ (8000410 <MX_SPI1_Init+0x64>)
 80003fe:	f002 f947 	bl	8002690 <HAL_SPI_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000408:	f000 f892 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000007c 	.word	0x2000007c
 8000414:	40013000 	.word	0x40013000

08000418 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 800041c:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <MX_USART1_Init+0x50>)
 800041e:	4a13      	ldr	r2, [pc, #76]	@ (800046c <MX_USART1_Init+0x54>)
 8000420:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <MX_USART1_Init+0x50>)
 8000424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000428:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <MX_USART1_Init+0x50>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000430:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <MX_USART1_Init+0x50>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <MX_USART1_Init+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800043c:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <MX_USART1_Init+0x50>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <MX_USART1_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <MX_USART1_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <MX_USART1_Init+0x50>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	@ (8000468 <MX_USART1_Init+0x50>)
 8000456:	f002 f99f 	bl	8002798 <HAL_USART_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000460:	f000 f866 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000d4 	.word	0x200000d4
 800046c:	40013800 	.word	0x40013800

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b27      	ldr	r3, [pc, #156]	@ (8000524 <MX_GPIO_Init+0xb4>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a26      	ldr	r2, [pc, #152]	@ (8000524 <MX_GPIO_Init+0xb4>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <MX_GPIO_Init+0xb4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b21      	ldr	r3, [pc, #132]	@ (8000524 <MX_GPIO_Init+0xb4>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a20      	ldr	r2, [pc, #128]	@ (8000524 <MX_GPIO_Init+0xb4>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <MX_GPIO_Init+0xb4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f641 0108 	movw	r1, #6152	@ 0x1808
 80004ba:	481b      	ldr	r0, [pc, #108]	@ (8000528 <MX_GPIO_Init+0xb8>)
 80004bc:	f000 fc8a 	bl	8000dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2102      	movs	r1, #2
 80004c4:	4819      	ldr	r0, [pc, #100]	@ (800052c <MX_GPIO_Init+0xbc>)
 80004c6:	f000 fc85 	bl	8000dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 80004ca:	f641 0308 	movw	r3, #6152	@ 0x1808
 80004ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2302      	movs	r3, #2
 80004da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	4619      	mov	r1, r3
 80004e2:	4811      	ldr	r0, [pc, #68]	@ (8000528 <MX_GPIO_Init+0xb8>)
 80004e4:	f000 faf2 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004e8:	2302      	movs	r3, #2
 80004ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	4619      	mov	r1, r3
 80004fe:	480b      	ldr	r0, [pc, #44]	@ (800052c <MX_GPIO_Init+0xbc>)
 8000500:	f000 fae4 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000504:	2310      	movs	r3, #16
 8000506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_GPIO_Init+0xbc>)
 8000518:	f000 fad8 	bl	8000acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051c:	bf00      	nop
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800
 800052c:	40010c00 	.word	0x40010c00

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <Error_Handler+0x8>

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a14      	ldr	r2, [pc, #80]	@ (8000598 <HAL_MspInit+0x5c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <HAL_MspInit+0x5c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <HAL_MspInit+0x5c>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <HAL_MspInit+0x5c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000572:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <HAL_MspInit+0x60>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <HAL_MspInit+0x60>)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <HAL_I2C_MspInit+0x70>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d123      	bne.n	8000608 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <HAL_I2C_MspInit+0x74>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <HAL_I2C_MspInit+0x74>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <HAL_I2C_MspInit+0x74>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005d8:	23c0      	movs	r3, #192	@ 0xc0
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005dc:	2312      	movs	r3, #18
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2303      	movs	r3, #3
 80005e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	@ (8000618 <HAL_I2C_MspInit+0x78>)
 80005ec:	f000 fa6e 	bl	8000acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <HAL_I2C_MspInit+0x74>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <HAL_I2C_MspInit+0x74>)
 80005f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <HAL_I2C_MspInit+0x74>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40005400 	.word	0x40005400
 8000614:	40021000 	.word	0x40021000
 8000618:	40010c00 	.word	0x40010c00

0800061c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <HAL_SPI_MspInit+0x88>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d12f      	bne.n	800069c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <HAL_SPI_MspInit+0x8c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a19      	ldr	r2, [pc, #100]	@ (80006a8 <HAL_SPI_MspInit+0x8c>)
 8000642:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <HAL_SPI_MspInit+0x8c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <HAL_SPI_MspInit+0x8c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <HAL_SPI_MspInit+0x8c>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <HAL_SPI_MspInit+0x8c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800066c:	23b0      	movs	r3, #176	@ 0xb0
 800066e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <HAL_SPI_MspInit+0x90>)
 8000680:	f000 fa24 	bl	8000acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000684:	2340      	movs	r3, #64	@ 0x40
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <HAL_SPI_MspInit+0x90>)
 8000698:	f000 fa18 	bl	8000acc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40013000 	.word	0x40013000
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800

080006b0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <HAL_USART_MspInit+0x8c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d131      	bne.n	8000734 <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <HAL_USART_MspInit+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000740 <HAL_USART_MspInit+0x90>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <HAL_USART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <HAL_USART_MspInit+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <HAL_USART_MspInit+0x90>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <HAL_USART_MspInit+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000700:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000704:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <HAL_USART_MspInit+0x94>)
 8000716:	f000 f9d9 	bl	8000acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800071a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <HAL_USART_MspInit+0x94>)
 8000730:	f000 f9cc 	bl	8000acc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <NMI_Handler+0x4>

08000750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <MemManage_Handler+0x4>

08000760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <UsageFault_Handler+0x4>

08000770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f874 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff fff8 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007b2:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b4:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a09      	ldr	r2, [pc, #36]	@ (80007ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c8:	4c09      	ldr	r4, [pc, #36]	@ (80007f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f002 fa07 	bl	8002be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fd13 	bl	8000204 <main>
  bx lr
 80007de:	4770      	bx	lr
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e8:	08002c7c 	.word	0x08002c7c
  ldr r2, =_sbss
 80007ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f0:	20000124 	.word	0x20000124

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_Init+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <HAL_Init+0x28>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f92b 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080e:	200f      	movs	r0, #15
 8000810:	f000 f808 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000814:	f7ff fe92 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40022000 	.word	0x40022000

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_InitTick+0x54>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_InitTick+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083a:	fbb3 f3f1 	udiv	r3, r3, r1
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f935 	bl	8000ab2 <HAL_SYSTICK_Config>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e00e      	b.n	8000870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d80a      	bhi.n	800086e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f90b 	bl	8000a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4a06      	ldr	r2, [pc, #24]	@ (8000880 <HAL_InitTick+0x5c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <HAL_IncTick+0x20>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000120 	.word	0x20000120

080008a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	@ (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	20000120 	.word	0x20000120

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff fff0 	bl	80008a8 <HAL_GetTick>
 80008c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_Delay+0x44>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e2:	bf00      	nop
 80008e4:	f7ff ffe0 	bl	80008a8 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	@ (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	@ 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	@ 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a30:	d301      	bcc.n	8000a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00f      	b.n	8000a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <SysTick_Config+0x40>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3e:	210f      	movs	r1, #15
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f7ff ff90 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <SysTick_Config+0x40>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <SysTick_Config+0x40>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff49 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff5e 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff90 	bl	80009bc <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff5f 	bl	8000968 <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffb0 	bl	8000a20 <SysTick_Config>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b08b      	sub	sp, #44	@ 0x2c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e169      	b.n	8000db4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f040 8158 	bne.w	8000dae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a9a      	ldr	r2, [pc, #616]	@ (8000d6c <HAL_GPIO_Init+0x2a0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d05e      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b08:	4a98      	ldr	r2, [pc, #608]	@ (8000d6c <HAL_GPIO_Init+0x2a0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d875      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b0e:	4a98      	ldr	r2, [pc, #608]	@ (8000d70 <HAL_GPIO_Init+0x2a4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d058      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b14:	4a96      	ldr	r2, [pc, #600]	@ (8000d70 <HAL_GPIO_Init+0x2a4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d86f      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b1a:	4a96      	ldr	r2, [pc, #600]	@ (8000d74 <HAL_GPIO_Init+0x2a8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d052      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b20:	4a94      	ldr	r2, [pc, #592]	@ (8000d74 <HAL_GPIO_Init+0x2a8>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d869      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b26:	4a94      	ldr	r2, [pc, #592]	@ (8000d78 <HAL_GPIO_Init+0x2ac>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d04c      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b2c:	4a92      	ldr	r2, [pc, #584]	@ (8000d78 <HAL_GPIO_Init+0x2ac>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d863      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b32:	4a92      	ldr	r2, [pc, #584]	@ (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d046      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
 8000b38:	4a90      	ldr	r2, [pc, #576]	@ (8000d7c <HAL_GPIO_Init+0x2b0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d85d      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b3e:	2b12      	cmp	r3, #18
 8000b40:	d82a      	bhi.n	8000b98 <HAL_GPIO_Init+0xcc>
 8000b42:	2b12      	cmp	r3, #18
 8000b44:	d859      	bhi.n	8000bfa <HAL_GPIO_Init+0x12e>
 8000b46:	a201      	add	r2, pc, #4	@ (adr r2, 8000b4c <HAL_GPIO_Init+0x80>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000bc7 	.word	0x08000bc7
 8000b50:	08000ba1 	.word	0x08000ba1
 8000b54:	08000bb3 	.word	0x08000bb3
 8000b58:	08000bf5 	.word	0x08000bf5
 8000b5c:	08000bfb 	.word	0x08000bfb
 8000b60:	08000bfb 	.word	0x08000bfb
 8000b64:	08000bfb 	.word	0x08000bfb
 8000b68:	08000bfb 	.word	0x08000bfb
 8000b6c:	08000bfb 	.word	0x08000bfb
 8000b70:	08000bfb 	.word	0x08000bfb
 8000b74:	08000bfb 	.word	0x08000bfb
 8000b78:	08000bfb 	.word	0x08000bfb
 8000b7c:	08000bfb 	.word	0x08000bfb
 8000b80:	08000bfb 	.word	0x08000bfb
 8000b84:	08000bfb 	.word	0x08000bfb
 8000b88:	08000bfb 	.word	0x08000bfb
 8000b8c:	08000bfb 	.word	0x08000bfb
 8000b90:	08000ba9 	.word	0x08000ba9
 8000b94:	08000bbd 	.word	0x08000bbd
 8000b98:	4a79      	ldr	r2, [pc, #484]	@ (8000d80 <HAL_GPIO_Init+0x2b4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d013      	beq.n	8000bc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b9e:	e02c      	b.n	8000bfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e029      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	3304      	adds	r3, #4
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	e024      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e01f      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	330c      	adds	r3, #12
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e01a      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e013      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d105      	bne.n	8000be8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	611a      	str	r2, [r3, #16]
          break;
 8000be6:	e009      	b.n	8000bfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	615a      	str	r2, [r3, #20]
          break;
 8000bf2:	e003      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x130>
          break;
 8000bfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2bff      	cmp	r3, #255	@ 0xff
 8000c00:	d801      	bhi.n	8000c06 <HAL_GPIO_Init+0x13a>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	e001      	b.n	8000c0a <HAL_GPIO_Init+0x13e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	2bff      	cmp	r3, #255	@ 0xff
 8000c10:	d802      	bhi.n	8000c18 <HAL_GPIO_Init+0x14c>
 8000c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	e002      	b.n	8000c1e <HAL_GPIO_Init+0x152>
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	3b08      	subs	r3, #8
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	210f      	movs	r1, #15
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	6a39      	ldr	r1, [r7, #32]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 80b1 	beq.w	8000dae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d84 <HAL_GPIO_Init+0x2b8>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a4c      	ldr	r2, [pc, #304]	@ (8000d84 <HAL_GPIO_Init+0x2b8>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b4a      	ldr	r3, [pc, #296]	@ (8000d84 <HAL_GPIO_Init+0x2b8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c64:	4a48      	ldr	r2, [pc, #288]	@ (8000d88 <HAL_GPIO_Init+0x2bc>)
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a40      	ldr	r2, [pc, #256]	@ (8000d8c <HAL_GPIO_Init+0x2c0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x1ec>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a3f      	ldr	r2, [pc, #252]	@ (8000d90 <HAL_GPIO_Init+0x2c4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e8>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d94 <HAL_GPIO_Init+0x2c8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1e4>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8000d98 <HAL_GPIO_Init+0x2cc>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1e0>
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e006      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e004      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cbc:	f002 0203 	and.w	r2, r2, #3
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cca:	492f      	ldr	r1, [pc, #188]	@ (8000d88 <HAL_GPIO_Init+0x2bc>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d006      	beq.n	8000cf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	492c      	ldr	r1, [pc, #176]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4928      	ldr	r1, [pc, #160]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	4922      	ldr	r1, [pc, #136]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	60cb      	str	r3, [r1, #12]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d1a:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	491e      	ldr	r1, [pc, #120]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4918      	ldr	r1, [pc, #96]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4914      	ldr	r1, [pc, #80]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d021      	beq.n	8000da0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	490e      	ldr	r1, [pc, #56]	@ (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e021      	b.n	8000dae <HAL_GPIO_Init+0x2e2>
 8000d6a:	bf00      	nop
 8000d6c:	10320000 	.word	0x10320000
 8000d70:	10310000 	.word	0x10310000
 8000d74:	10220000 	.word	0x10220000
 8000d78:	10210000 	.word	0x10210000
 8000d7c:	10120000 	.word	0x10120000
 8000d80:	10110000 	.word	0x10110000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40011400 	.word	0x40011400
 8000d9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_GPIO_Init+0x304>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4909      	ldr	r1, [pc, #36]	@ (8000dd0 <HAL_GPIO_Init+0x304>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dba:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f47f ae8e 	bne.w	8000ae0 <HAL_GPIO_Init+0x14>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	372c      	adds	r7, #44	@ 0x2c
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
 8000de0:	4613      	mov	r3, r2
 8000de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de4:	787b      	ldrb	r3, [r7, #1]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000df0:	e003      	b.n	8000dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	041a      	lsls	r2, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	611a      	str	r2, [r3, #16]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e12b      	b.n	800106e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d106      	bne.n	8000e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fbb8 	bl	80005a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2224      	movs	r2, #36	@ 0x24
 8000e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e68:	f001 fbcc 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8000e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	4a81      	ldr	r2, [pc, #516]	@ (8001078 <HAL_I2C_Init+0x274>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d807      	bhi.n	8000e88 <HAL_I2C_Init+0x84>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4a80      	ldr	r2, [pc, #512]	@ (800107c <HAL_I2C_Init+0x278>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	bf94      	ite	ls
 8000e80:	2301      	movls	r3, #1
 8000e82:	2300      	movhi	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	e006      	b.n	8000e96 <HAL_I2C_Init+0x92>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4a7d      	ldr	r2, [pc, #500]	@ (8001080 <HAL_I2C_Init+0x27c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	bf94      	ite	ls
 8000e90:	2301      	movls	r3, #1
 8000e92:	2300      	movhi	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e0e7      	b.n	800106e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4a78      	ldr	r2, [pc, #480]	@ (8001084 <HAL_I2C_Init+0x280>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8001078 <HAL_I2C_Init+0x274>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d802      	bhi.n	8000ed8 <HAL_I2C_Init+0xd4>
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	e009      	b.n	8000eec <HAL_I2C_Init+0xe8>
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4a69      	ldr	r2, [pc, #420]	@ (8001088 <HAL_I2C_Init+0x284>)
 8000ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee8:	099b      	lsrs	r3, r3, #6
 8000eea:	3301      	adds	r3, #1
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000efe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	495c      	ldr	r1, [pc, #368]	@ (8001078 <HAL_I2C_Init+0x274>)
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d819      	bhi.n	8000f40 <HAL_I2C_Init+0x13c>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	1e59      	subs	r1, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f1a:	1c59      	adds	r1, r3, #1
 8000f1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f20:	400b      	ands	r3, r1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00a      	beq.n	8000f3c <HAL_I2C_Init+0x138>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1e59      	subs	r1, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f34:	3301      	adds	r3, #1
 8000f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f3a:	e051      	b.n	8000fe0 <HAL_I2C_Init+0x1dc>
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	e04f      	b.n	8000fe0 <HAL_I2C_Init+0x1dc>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d111      	bne.n	8000f6c <HAL_I2C_Init+0x168>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	1e58      	subs	r0, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6859      	ldr	r1, [r3, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	440b      	add	r3, r1
 8000f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	e012      	b.n	8000f92 <HAL_I2C_Init+0x18e>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1e58      	subs	r0, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6859      	ldr	r1, [r3, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	0099      	lsls	r1, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf0c      	ite	eq
 8000f8c:	2301      	moveq	r3, #1
 8000f8e:	2300      	movne	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_I2C_Init+0x196>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e022      	b.n	8000fe0 <HAL_I2C_Init+0x1dc>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10e      	bne.n	8000fc0 <HAL_I2C_Init+0x1bc>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1e58      	subs	r0, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6859      	ldr	r1, [r3, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	440b      	add	r3, r1
 8000fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fbe:	e00f      	b.n	8000fe0 <HAL_I2C_Init+0x1dc>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1e58      	subs	r0, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6859      	ldr	r1, [r3, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	0099      	lsls	r1, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	6809      	ldr	r1, [r1, #0]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69da      	ldr	r2, [r3, #28]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800100e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6911      	ldr	r1, [r2, #16]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68d2      	ldr	r2, [r2, #12]
 800101a:	4311      	orrs	r1, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	430b      	orrs	r3, r1
 8001022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2220      	movs	r2, #32
 800105a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	000186a0 	.word	0x000186a0
 800107c:	001e847f 	.word	0x001e847f
 8001080:	003d08ff 	.word	0x003d08ff
 8001084:	431bde83 	.word	0x431bde83
 8001088:	10624dd3 	.word	0x10624dd3

0800108c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af02      	add	r7, sp, #8
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	461a      	mov	r2, r3
 8001098:	460b      	mov	r3, r1
 800109a:	817b      	strh	r3, [r7, #10]
 800109c:	4613      	mov	r3, r2
 800109e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fc02 	bl	80008a8 <HAL_GetTick>
 80010a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b20      	cmp	r3, #32
 80010b0:	f040 80e0 	bne.w	8001274 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2319      	movs	r3, #25
 80010ba:	2201      	movs	r2, #1
 80010bc:	4970      	ldr	r1, [pc, #448]	@ (8001280 <HAL_I2C_Master_Transmit+0x1f4>)
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 fc9e 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010ca:	2302      	movs	r3, #2
 80010cc:	e0d3      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_I2C_Master_Transmit+0x50>
 80010d8:	2302      	movs	r3, #2
 80010da:	e0cc      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1ea>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d007      	beq.n	8001102 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0201 	orr.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001110:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2221      	movs	r2, #33	@ 0x21
 8001116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2210      	movs	r2, #16
 800111e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	893a      	ldrh	r2, [r7, #8]
 8001132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001138:	b29a      	uxth	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a50      	ldr	r2, [pc, #320]	@ (8001284 <HAL_I2C_Master_Transmit+0x1f8>)
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001144:	8979      	ldrh	r1, [r7, #10]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	6a3a      	ldr	r2, [r7, #32]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 fb08 	bl	8001760 <I2C_MasterRequestWrite>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e08d      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001170:	e066      	b.n	8001240 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	6a39      	ldr	r1, [r7, #32]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 fd5c 	bl	8001c34 <I2C_WaitOnTXEFlagUntilTimeout>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00d      	beq.n	800119e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	2b04      	cmp	r3, #4
 8001188:	d107      	bne.n	800119a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e06b      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	3b01      	subs	r3, #1
 80011bc:	b29a      	uxth	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d11b      	bne.n	8001214 <HAL_I2C_Master_Transmit+0x188>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d017      	beq.n	8001214 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011fe:	b29b      	uxth	r3, r3
 8001200:	3b01      	subs	r3, #1
 8001202:	b29a      	uxth	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800120c:	3b01      	subs	r3, #1
 800120e:	b29a      	uxth	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	6a39      	ldr	r1, [r7, #32]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fd53 	bl	8001cc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00d      	beq.n	8001240 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	2b04      	cmp	r3, #4
 800122a:	d107      	bne.n	800123c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800123a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e01a      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001244:	2b00      	cmp	r3, #0
 8001246:	d194      	bne.n	8001172 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2220      	movs	r2, #32
 800125c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001274:	2302      	movs	r3, #2
  }
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	00100002 	.word	0x00100002
 8001284:	ffff0000 	.word	0xffff0000

08001288 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	@ 0x30
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	461a      	mov	r2, r3
 8001294:	460b      	mov	r3, r1
 8001296:	817b      	strh	r3, [r7, #10]
 8001298:	4613      	mov	r3, r2
 800129a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fb02 	bl	80008a8 <HAL_GetTick>
 80012a4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	f040 824b 	bne.w	800174a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2319      	movs	r3, #25
 80012ba:	2201      	movs	r2, #1
 80012bc:	497f      	ldr	r1, [pc, #508]	@ (80014bc <HAL_I2C_Master_Receive+0x234>)
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 fb9e 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80012ca:	2302      	movs	r3, #2
 80012cc:	e23e      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_I2C_Master_Receive+0x54>
 80012d8:	2302      	movs	r3, #2
 80012da:	e237      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d007      	beq.n	8001302 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0201 	orr.w	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001310:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2222      	movs	r2, #34	@ 0x22
 8001316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2210      	movs	r2, #16
 800131e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	893a      	ldrh	r2, [r7, #8]
 8001332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001338:	b29a      	uxth	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4a5f      	ldr	r2, [pc, #380]	@ (80014c0 <HAL_I2C_Master_Receive+0x238>)
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001344:	8979      	ldrh	r1, [r7, #10]
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 fa8a 	bl	8001864 <I2C_MasterRequestRead>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1f8      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800135e:	2b00      	cmp	r3, #0
 8001360:	d113      	bne.n	800138a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e1cc      	b.n	8001724 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800138e:	2b01      	cmp	r3, #1
 8001390:	d11e      	bne.n	80013d0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013a2:	b672      	cpsid	i
}
 80013a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013cc:	b662      	cpsie	i
}
 80013ce:	e035      	b.n	800143c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d11e      	bne.n	8001416 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001410:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001412:	b662      	cpsie	i
}
 8001414:	e012      	b.n	800143c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800143c:	e172      	b.n	8001724 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001442:	2b03      	cmp	r3, #3
 8001444:	f200 811f 	bhi.w	8001686 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144c:	2b01      	cmp	r3, #1
 800144e:	d123      	bne.n	8001498 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001452:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 fc7d 	bl	8001d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e173      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001480:	3b01      	subs	r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800148c:	b29b      	uxth	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001496:	e145      	b.n	8001724 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149c:	2b02      	cmp	r3, #2
 800149e:	d152      	bne.n	8001546 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a6:	2200      	movs	r2, #0
 80014a8:	4906      	ldr	r1, [pc, #24]	@ (80014c4 <HAL_I2C_Master_Receive+0x23c>)
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 faa8 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e148      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
 80014ba:	bf00      	nop
 80014bc:	00100002 	.word	0x00100002
 80014c0:	ffff0000 	.word	0xffff0000
 80014c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800150e:	b662      	cpsie	i
}
 8001510:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152e:	3b01      	subs	r3, #1
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800153a:	b29b      	uxth	r3, r3
 800153c:	3b01      	subs	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001544:	e0ee      	b.n	8001724 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800154c:	2200      	movs	r2, #0
 800154e:	4981      	ldr	r1, [pc, #516]	@ (8001754 <HAL_I2C_Master_Receive+0x4cc>)
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 fa55 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0f5      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800156e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001590:	3b01      	subs	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800159c:	b29b      	uxth	r3, r3
 800159e:	3b01      	subs	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001758 <HAL_I2C_Master_Receive+0x4d0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	4a6b      	ldr	r2, [pc, #428]	@ (800175c <HAL_I2C_Master_Receive+0x4d4>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0a1a      	lsrs	r2, r3, #8
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00da      	lsls	r2, r3, #3
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d118      	bne.n	80015fe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f043 0220 	orr.w	r2, r3, #32
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015ee:	b662      	cpsie	i
}
 80015f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0a6      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b04      	cmp	r3, #4
 800160a:	d1d9      	bne.n	80015c0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800161a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800164e:	b662      	cpsie	i
}
 8001650:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166e:	3b01      	subs	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001684:	e04e      	b.n	8001724 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fb62 	bl	8001d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e058      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d124      	bne.n	8001724 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d107      	bne.n	80016f2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f ae88 	bne.w	800143e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800174a:	2302      	movs	r3, #2
  }
}
 800174c:	4618      	mov	r0, r3
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	00010004 	.word	0x00010004
 8001758:	20000000 	.word	0x20000000
 800175c:	14f8b589 	.word	0x14f8b589

08001760 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	460b      	mov	r3, r1
 800176e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001774:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d006      	beq.n	800178a <I2C_MasterRequestWrite+0x2a>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d003      	beq.n	800178a <I2C_MasterRequestWrite+0x2a>
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001788:	d108      	bne.n	800179c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00b      	b.n	80017b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d107      	bne.n	80017b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f91d 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017da:	d103      	bne.n	80017e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e035      	b.n	8001854 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017f0:	d108      	bne.n	8001804 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	e01b      	b.n	800183c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001804:	897b      	ldrh	r3, [r7, #10]
 8001806:	11db      	asrs	r3, r3, #7
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 0306 	and.w	r3, r3, #6
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f063 030f 	orn	r3, r3, #15
 8001814:	b2da      	uxtb	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	490e      	ldr	r1, [pc, #56]	@ (800185c <I2C_MasterRequestWrite+0xfc>)
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f966 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e010      	b.n	8001854 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001832:	897b      	ldrh	r3, [r7, #10]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <I2C_MasterRequestWrite+0x100>)
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f956 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	00010008 	.word	0x00010008
 8001860:	00010002 	.word	0x00010002

08001864 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001888:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d006      	beq.n	800189e <I2C_MasterRequestRead+0x3a>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d003      	beq.n	800189e <I2C_MasterRequestRead+0x3a>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800189c:	d108      	bne.n	80018b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e00b      	b.n	80018c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	2b11      	cmp	r3, #17
 80018b6:	d107      	bne.n	80018c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f893 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00d      	beq.n	80018fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018ee:	d103      	bne.n	80018f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e079      	b.n	80019f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001904:	d108      	bne.n	8001918 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	e05f      	b.n	80019d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	11db      	asrs	r3, r3, #7
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f003 0306 	and.w	r3, r3, #6
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f063 030f 	orn	r3, r3, #15
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4930      	ldr	r1, [pc, #192]	@ (80019f8 <I2C_MasterRequestRead+0x194>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f8dc 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e054      	b.n	80019f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4929      	ldr	r1, [pc, #164]	@ (80019fc <I2C_MasterRequestRead+0x198>)
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f8cc 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e044      	b.n	80019f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800198a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f831 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019b2:	d103      	bne.n	80019bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e017      	b.n	80019f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80019c0:	897b      	ldrh	r3, [r7, #10]
 80019c2:	11db      	asrs	r3, r3, #7
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f003 0306 	and.w	r3, r3, #6
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f063 030e 	orn	r3, r3, #14
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4907      	ldr	r1, [pc, #28]	@ (80019fc <I2C_MasterRequestRead+0x198>)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f888 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	00010008 	.word	0x00010008
 80019fc:	00010002 	.word	0x00010002

08001a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a10:	e048      	b.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d044      	beq.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1a:	f7fe ff45 	bl	80008a8 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d302      	bcc.n	8001a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d139      	bne.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10d      	bne.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4013      	ands	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	e00c      	b.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4013      	ands	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d116      	bne.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e023      	b.n	8001aec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10d      	bne.n	8001aca <I2C_WaitOnFlagUntilTimeout+0xca>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	e00c      	b.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d093      	beq.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b02:	e071      	b.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b12:	d123      	bne.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f043 0204 	orr.w	r2, r3, #4
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e067      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b62:	d041      	beq.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b64:	f7fe fea0 	bl	80008a8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d302      	bcc.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d136      	bne.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10c      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e00b      	b.n	8001bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e021      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10c      	bne.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e00b      	b.n	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f af6d 	bne.w	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c40:	e034      	b.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f8e3 	bl	8001e0e <I2C_IsAcknowledgeFailed>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e034      	b.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d028      	beq.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5a:	f7fe fe25 	bl	80008a8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d302      	bcc.n	8001c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11d      	bne.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	2b80      	cmp	r3, #128	@ 0x80
 8001c7c:	d016      	beq.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e007      	b.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb6:	2b80      	cmp	r3, #128	@ 0x80
 8001cb8:	d1c3      	bne.n	8001c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd0:	e034      	b.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f89b 	bl	8001e0e <I2C_IsAcknowledgeFailed>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e034      	b.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d028      	beq.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cea:	f7fe fddd 	bl	80008a8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d302      	bcc.n	8001d00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11d      	bne.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d016      	beq.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e007      	b.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d1c3      	bne.n	8001cd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d60:	e049      	b.n	8001df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d119      	bne.n	8001da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0210 	mvn.w	r2, #16
 8001d78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e030      	b.n	8001e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da4:	f7fe fd80 	bl	80008a8 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d302      	bcc.n	8001dba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d11d      	bne.n	8001df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc4:	2b40      	cmp	r3, #64	@ 0x40
 8001dc6:	d016      	beq.n	8001df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e007      	b.n	8001e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e00:	2b40      	cmp	r3, #64	@ 0x40
 8001e02:	d1ae      	bne.n	8001d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e24:	d11b      	bne.n	8001e5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e272      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8087 	beq.w	8001f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e8c:	4b92      	ldr	r3, [pc, #584]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d00c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e98:	4b8f      	ldr	r3, [pc, #572]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d112      	bne.n	8001eca <HAL_RCC_OscConfig+0x5e>
 8001ea4:	4b8c      	ldr	r3, [pc, #560]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb0:	d10b      	bne.n	8001eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb2:	4b89      	ldr	r3, [pc, #548]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d06c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x12c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d168      	bne.n	8001f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e24c      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x76>
 8001ed4:	4b80      	ldr	r3, [pc, #512]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7f      	ldr	r2, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e02e      	b.n	8001f40 <HAL_RCC_OscConfig+0xd4>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x98>
 8001eea:	4b7b      	ldr	r3, [pc, #492]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7a      	ldr	r2, [pc, #488]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b78      	ldr	r3, [pc, #480]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a77      	ldr	r2, [pc, #476]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0xd4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0xbc>
 8001f0e:	4b72      	ldr	r3, [pc, #456]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a71      	ldr	r2, [pc, #452]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0xd4>
 8001f28:	4b6b      	ldr	r3, [pc, #428]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b68      	ldr	r3, [pc, #416]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a67      	ldr	r2, [pc, #412]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe fcae 	bl	80008a8 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7fe fcaa 	bl	80008a8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	@ 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e200      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe4>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe fc9a 	bl	80008a8 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7fe fc96 	bl	80008a8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	@ 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1ec      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	4b53      	ldr	r3, [pc, #332]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x10c>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d063      	beq.n	800206e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00b      	beq.n	8001fca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fb2:	4b49      	ldr	r3, [pc, #292]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d11c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x18c>
 8001fbe:	4b46      	ldr	r3, [pc, #280]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d116      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x176>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e1c0      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4939      	ldr	r1, [pc, #228]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	e03a      	b.n	800206e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002000:	4b36      	ldr	r3, [pc, #216]	@ (80020dc <HAL_RCC_OscConfig+0x270>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fc4f 	bl	80008a8 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200e:	f7fe fc4b 	bl	80008a8 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1a1      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4927      	ldr	r1, [pc, #156]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002042:	4b26      	ldr	r3, [pc, #152]	@ (80020dc <HAL_RCC_OscConfig+0x270>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe fc2e 	bl	80008a8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7fe fc2a 	bl	80008a8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e180      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d03a      	beq.n	80020f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d019      	beq.n	80020b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <HAL_RCC_OscConfig+0x274>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7fe fc0e 	bl	80008a8 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7fe fc0a 	bl	80008a8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e160      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f000 fad0 	bl	8002654 <RCC_Delay>
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_RCC_OscConfig+0x274>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020bc:	f7fe fbf4 	bl	80008a8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c2:	e00f      	b.n	80020e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c4:	f7fe fbf0 	bl	80008a8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d908      	bls.n	80020e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e146      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	42420000 	.word	0x42420000
 80020e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b92      	ldr	r3, [pc, #584]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e9      	bne.n	80020c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a6 	beq.w	800224a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b8b      	ldr	r3, [pc, #556]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b88      	ldr	r3, [pc, #544]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4a87      	ldr	r2, [pc, #540]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002118:	61d3      	str	r3, [r2, #28]
 800211a:	4b85      	ldr	r3, [pc, #532]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4b82      	ldr	r3, [pc, #520]	@ (8002334 <HAL_RCC_OscConfig+0x4c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002136:	4b7f      	ldr	r3, [pc, #508]	@ (8002334 <HAL_RCC_OscConfig+0x4c8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7e      	ldr	r2, [pc, #504]	@ (8002334 <HAL_RCC_OscConfig+0x4c8>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002142:	f7fe fbb1 	bl	80008a8 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe fbad 	bl	80008a8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	@ 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e103      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b75      	ldr	r3, [pc, #468]	@ (8002334 <HAL_RCC_OscConfig+0x4c8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x312>
 8002170:	4b6f      	ldr	r3, [pc, #444]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a6e      	ldr	r2, [pc, #440]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e02d      	b.n	80021da <HAL_RCC_OscConfig+0x36e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x334>
 8002186:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a69      	ldr	r2, [pc, #420]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	4b67      	ldr	r3, [pc, #412]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a66      	ldr	r2, [pc, #408]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	e01c      	b.n	80021da <HAL_RCC_OscConfig+0x36e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x356>
 80021a8:	4b61      	ldr	r3, [pc, #388]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a60      	ldr	r2, [pc, #384]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e00b      	b.n	80021da <HAL_RCC_OscConfig+0x36e>
 80021c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	4b58      	ldr	r3, [pc, #352]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a57      	ldr	r2, [pc, #348]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d015      	beq.n	800220e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7fe fb61 	bl	80008a8 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7fe fb5d 	bl	80008a8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0b1      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b4b      	ldr	r3, [pc, #300]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCC_OscConfig+0x37e>
 800220c:	e014      	b.n	8002238 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe fb4b 	bl	80008a8 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe fb47 	bl	80008a8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e09b      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	4b40      	ldr	r3, [pc, #256]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a3b      	ldr	r2, [pc, #236]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002248:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8087 	beq.w	8002362 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002254:	4b36      	ldr	r3, [pc, #216]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d061      	beq.n	8002324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d146      	bne.n	80022f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b33      	ldr	r3, [pc, #204]	@ (8002338 <HAL_RCC_OscConfig+0x4cc>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fb1b 	bl	80008a8 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fb17 	bl	80008a8 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e06d      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	4b29      	ldr	r3, [pc, #164]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229c:	d108      	bne.n	80022b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800229e:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4921      	ldr	r1, [pc, #132]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a19      	ldr	r1, [r3, #32]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	430b      	orrs	r3, r1
 80022c2:	491b      	ldr	r1, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x4cc>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe faeb 	bl	80008a8 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fae7 	bl	80008a8 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e03d      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x46a>
 80022f4:	e035      	b.n	8002362 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_RCC_OscConfig+0x4cc>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fad4 	bl	80008a8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fad0 	bl	80008a8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e026      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x498>
 8002322:	e01e      	b.n	8002362 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e019      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
 8002338:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_RCC_OscConfig+0x500>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	429a      	cmp	r2, r3
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0d0      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b6a      	ldr	r3, [pc, #424]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d910      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b67      	ldr	r3, [pc, #412]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 0207 	bic.w	r2, r3, #7
 800239a:	4965      	ldr	r1, [pc, #404]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b63      	ldr	r3, [pc, #396]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b8      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a58      	ldr	r2, [pc, #352]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b50      	ldr	r3, [pc, #320]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	494d      	ldr	r1, [pc, #308]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d040      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d115      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e073      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3d      	ldr	r3, [pc, #244]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06b      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4936      	ldr	r1, [pc, #216]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe fa22 	bl	80008a8 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fa1e 	bl	80008a8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e053      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d210      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0207 	bic.w	r2, r3, #7
 80024a6:	4922      	ldr	r1, [pc, #136]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4916      	ldr	r1, [pc, #88]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490e      	ldr	r1, [pc, #56]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024fe:	f000 f821 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490a      	ldr	r1, [pc, #40]	@ (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a09      	ldr	r2, [pc, #36]	@ (800253c <HAL_RCC_ClockConfig+0x1cc>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_ClockConfig+0x1d0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f980 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000
 8002534:	40021000 	.word	0x40021000
 8002538:	08002c48 	.word	0x08002c48
 800253c:	20000000 	.word	0x20000000
 8002540:	20000004 	.word	0x20000004

08002544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x30>
 800256e:	2b08      	cmp	r3, #8
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x36>
 8002572:	e027      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	613b      	str	r3, [r7, #16]
      break;
 8002578:	e027      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002584:	5cd3      	ldrb	r3, [r2, r3]
 8002586:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d010      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0c5b      	lsrs	r3, r3, #17
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x98>)
 80025a6:	fb03 f202 	mul.w	r2, r3, r2
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e004      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025b8:	fb02 f303 	mul.w	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	613b      	str	r3, [r7, #16]
      break;
 80025c2:	e002      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xa8>)
 80025c6:	613b      	str	r3, [r7, #16]
      break;
 80025c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ca:	693b      	ldr	r3, [r7, #16]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	00f42400 	.word	0x00f42400
 80025e0:	08002c60 	.word	0x08002c60
 80025e4:	08002c70 	.word	0x08002c70
 80025e8:	003d0900 	.word	0x003d0900
 80025ec:	007a1200 	.word	0x007a1200

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b02      	ldr	r3, [pc, #8]	@ (8002600 <HAL_RCC_GetHCLKFreq+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff2 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	08002c58 	.word	0x08002c58

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffde 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0adb      	lsrs	r3, r3, #11
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	@ (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	08002c58 	.word	0x08002c58

08002654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <RCC_Delay+0x34>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <RCC_Delay+0x38>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0a5b      	lsrs	r3, r3, #9
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002670:	bf00      	nop
  }
  while (Delay --);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	60fa      	str	r2, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <RCC_Delay+0x1c>
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	20000000 	.word	0x20000000
 800268c:	10624dd3 	.word	0x10624dd3

08002690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e076      	b.n	8002790 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026b2:	d009      	beq.n	80026c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
 80026ba:	e005      	b.n	80026c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fd ff9a 	bl	800061c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274c:	ea42 0103 	orr.w	r1, r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	0c1a      	lsrs	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f002 0204 	and.w	r2, r2, #4
 800276e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e033      	b.n	8002812 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fd ff76 	bl	80006b0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f90b 	bl	80029e8 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027f0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002800:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08a      	sub	sp, #40	@ 0x28
 800281e:	af02      	add	r7, sp, #8
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d17c      	bne.n	8002930 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_USART_Transmit+0x28>
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e075      	b.n	8002932 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_USART_Transmit+0x3a>
 8002850:	2302      	movs	r3, #2
 8002852:	e06e      	b.n	8002932 <HAL_USART_Transmit+0x118>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2212      	movs	r2, #18
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286a:	f7fe f81d 	bl	80008a8 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002884:	d108      	bne.n	8002898 <HAL_USART_Transmit+0x7e>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e003      	b.n	80028a0 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80028a0:	e02a      	b.n	80028f8 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	@ 0x80
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f844 	bl	800293a <USART_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03a      	b.n	8002932 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10b      	bne.n	80028da <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d0:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3302      	adds	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	e007      	b.n	80028ea <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	3301      	adds	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1cf      	bne.n	80028a2 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f814 	bl	800293a <USART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e00a      	b.n	8002932 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800294a:	e038      	b.n	80029be <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002952:	d034      	beq.n	80029be <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <USART_WaitOnFlagUntilTimeout+0x30>
 800295a:	f7fd ffa5 	bl	80008a8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	429a      	cmp	r2, r3
 8002968:	d229      	bcs.n	80029be <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002978:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0220 	bic.w	r2, r2, #32
 8002988:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002998:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d0b7      	beq.n	800294c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 020c 	bic.w	r2, r2, #12
 8002a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002a1c:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a32:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a4a:	f023 030c 	bic.w	r3, r3, #12
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a7c:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if (husart->Instance == USART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a53      	ldr	r2, [pc, #332]	@ (8002bd0 <USART_SetConfig+0x1e8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d14f      	bne.n	8002b28 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a88:	f7ff fdd0 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8002a8c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	0119      	lsls	r1, r3, #4
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009a      	lsls	r2, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac4:	4b43      	ldr	r3, [pc, #268]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2064      	movs	r0, #100	@ 0x64
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	@ 0x32
 8002ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 8002ae6:	4419      	add	r1, r3
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afe:	4b35      	ldr	r3, [pc, #212]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002b00:	fba3 0302 	umull	r0, r3, r3, r2
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	2064      	movs	r0, #100	@ 0x64
 8002b08:	fb00 f303 	mul.w	r3, r0, r3
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	3332      	adds	r3, #50	@ 0x32
 8002b12:	4a30      	ldr	r2, [pc, #192]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	440a      	add	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8002b26:	e04e      	b.n	8002bc6 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7ff fd6c 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8002b2c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a23      	ldr	r2, [pc, #140]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	0119      	lsls	r1, r3, #4
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009a      	lsls	r2, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b64:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002b66:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2064      	movs	r0, #100	@ 0x64
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	3332      	adds	r3, #50	@ 0x32
 8002b78:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	f403 73f0 	and.w	r3, r3, #480	@ 0x1e0
 8002b86:	4419      	add	r1, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	441a      	add	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002ba0:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	2064      	movs	r0, #100	@ 0x64
 8002ba8:	fb00 f303 	mul.w	r3, r0, r3
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	3332      	adds	r3, #50	@ 0x32
 8002bb2:	4a08      	ldr	r2, [pc, #32]	@ (8002bd4 <USART_SetConfig+0x1ec>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	440a      	add	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40013800 	.word	0x40013800
 8002bd4:	51eb851f 	.word	0x51eb851f

08002bd8 <memset>:
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4402      	add	r2, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d100      	bne.n	8002be2 <memset+0xa>
 8002be0:	4770      	bx	lr
 8002be2:	f803 1b01 	strb.w	r1, [r3], #1
 8002be6:	e7f9      	b.n	8002bdc <memset+0x4>

08002be8 <__libc_init_array>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	2600      	movs	r6, #0
 8002bec:	4d0c      	ldr	r5, [pc, #48]	@ (8002c20 <__libc_init_array+0x38>)
 8002bee:	4c0d      	ldr	r4, [pc, #52]	@ (8002c24 <__libc_init_array+0x3c>)
 8002bf0:	1b64      	subs	r4, r4, r5
 8002bf2:	10a4      	asrs	r4, r4, #2
 8002bf4:	42a6      	cmp	r6, r4
 8002bf6:	d109      	bne.n	8002c0c <__libc_init_array+0x24>
 8002bf8:	f000 f81a 	bl	8002c30 <_init>
 8002bfc:	2600      	movs	r6, #0
 8002bfe:	4d0a      	ldr	r5, [pc, #40]	@ (8002c28 <__libc_init_array+0x40>)
 8002c00:	4c0a      	ldr	r4, [pc, #40]	@ (8002c2c <__libc_init_array+0x44>)
 8002c02:	1b64      	subs	r4, r4, r5
 8002c04:	10a4      	asrs	r4, r4, #2
 8002c06:	42a6      	cmp	r6, r4
 8002c08:	d105      	bne.n	8002c16 <__libc_init_array+0x2e>
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c10:	4798      	blx	r3
 8002c12:	3601      	adds	r6, #1
 8002c14:	e7ee      	b.n	8002bf4 <__libc_init_array+0xc>
 8002c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1a:	4798      	blx	r3
 8002c1c:	3601      	adds	r6, #1
 8002c1e:	e7f2      	b.n	8002c06 <__libc_init_array+0x1e>
 8002c20:	08002c74 	.word	0x08002c74
 8002c24:	08002c74 	.word	0x08002c74
 8002c28:	08002c74 	.word	0x08002c74
 8002c2c:	08002c78 	.word	0x08002c78

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
